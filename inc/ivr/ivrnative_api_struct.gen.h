/* THIS FILE IS GENERATED DO NOT EDIT */
#ifndef IVR_NATIVE_API_STRUCT_H
#define IVR_NATIVE_API_STRUCT_H

#include <native/native.h>
#include <android/ivr_android.h>
#include <arvr/ivr_arvr.h>
#include <nativescript/ivr_nativescript.h>
#include <net/ivr_net.h>
#include <pluginscript/ivr_pluginscript.h>
#include <videodecoder/ivr_videodecoder.h>

#define IVRNATIVE_API_INIT(options) do {  \
	extern const ivr_native_core_api_struct *_ivrnative_wrapper_api_struct;  \
	extern const ivr_native_ext_nativescript_api_struct *_ivrnative_wrapper_nativescript_api_struct;  \
	extern const ivr_native_ext_pluginscript_api_struct *_ivrnative_wrapper_pluginscript_api_struct;  \
	extern const ivr_native_ext_android_api_struct *_ivrnative_wrapper_android_api_struct;  \
	extern const ivr_native_ext_arvr_api_struct *_ivrnative_wrapper_arvr_api_struct;  \
	extern const ivr_native_ext_videodecoder_api_struct *_ivrnative_wrapper_videodecoder_api_struct;  \
	extern const ivr_native_ext_net_api_struct *_ivrnative_wrapper_net_api_struct;  \
	_ivrnative_wrapper_api_struct = options->api_struct;  \
	for (unsigned int i = 0; i < _ivrnative_wrapper_api_struct->num_extensions; i++) {   \
		switch (_ivrnative_wrapper_api_struct->extensions[i]->type) {  \
			case IVRNATIVE_EXT_NATIVESCRIPT:  \
				_ivrnative_wrapper_nativescript_api_struct = (ivr_native_ext_nativescript_api_struct *) _ivrnative_wrapper_api_struct->extensions[i];  \
				break;  \
			case IVRNATIVE_EXT_PLUGINSCRIPT:  \
				_ivrnative_wrapper_pluginscript_api_struct = (ivr_native_ext_pluginscript_api_struct *) _ivrnative_wrapper_api_struct->extensions[i];  \
				break;  \
			case IVRNATIVE_EXT_ANDROID:  \
				_ivrnative_wrapper_android_api_struct = (ivr_native_ext_android_api_struct *) _ivrnative_wrapper_api_struct->extensions[i];  \
				break;  \
			case IVRNATIVE_EXT_ARVR:  \
				_ivrnative_wrapper_arvr_api_struct = (ivr_native_ext_arvr_api_struct *) _ivrnative_wrapper_api_struct->extensions[i];  \
				break;  \
			case IVRNATIVE_EXT_VIDEODECODER:  \
				_ivrnative_wrapper_videodecoder_api_struct = (ivr_native_ext_videodecoder_api_struct *) _ivrnative_wrapper_api_struct->extensions[i];  \
				break;  \
			case IVRNATIVE_EXT_NET:  \
				_ivrnative_wrapper_net_api_struct = (ivr_native_ext_net_api_struct *) _ivrnative_wrapper_api_struct->extensions[i];  \
				break;  \
		}  \
	}  \
 } while (0)

#ifdef __cplusplus
extern "C" {
#endif

enum IVRNATIVE_API_TYPES {
	IVRNATIVE_CORE,
	IVRNATIVE_EXT_NATIVESCRIPT,
	IVRNATIVE_EXT_PLUGINSCRIPT,
	IVRNATIVE_EXT_ANDROID,
	IVRNATIVE_EXT_ARVR,
	IVRNATIVE_EXT_VIDEODECODER,
	IVRNATIVE_EXT_NET,
};

typedef struct ivr_native_ext_nativescript_1_1_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	void (*ivr_nativescript_set_method_argument_information)(void *p_ivrnative_handle, const char *p_name, const char *p_function_name, int p_num_args, const ivr_method_arg *p_args);
	void (*ivr_nativescript_set_class_documentation)(void *p_ivrnative_handle, const char *p_name, ivr_string p_documentation);
	void (*ivr_nativescript_set_method_documentation)(void *p_ivrnative_handle, const char *p_name, const char *p_function_name, ivr_string p_documentation);
	void (*ivr_nativescript_set_property_documentation)(void *p_ivrnative_handle, const char *p_name, const char *p_path, ivr_string p_documentation);
	void (*ivr_nativescript_set_signal_documentation)(void *p_ivrnative_handle, const char *p_name, const char *p_signal_name, ivr_string p_documentation);
	void (*ivr_nativescript_set_global_type_tag)(int p_idx, const char *p_name, const void *p_type_tag);
	const void *(*ivr_nativescript_get_global_type_tag)(int p_idx, const char *p_name);
	void (*ivr_nativescript_set_type_tag)(void *p_ivrnative_handle, const char *p_name, const void *p_type_tag);
	const void *(*ivr_nativescript_get_type_tag)(const ivr_object *p_object);
	int (*ivr_nativescript_register_instance_binding_data_functions)(ivr_instance_binding_functions p_binding_functions);
	void (*ivr_nativescript_unregister_instance_binding_data_functions)(int p_idx);
	void *(*ivr_nativescript_get_instance_binding_data)(int p_idx, ivr_object *p_object);
	void (*ivr_nativescript_profiling_add_data)(const char *p_signature, uint64_t p_line);
} ivr_native_ext_nativescript_1_1_api_struct;

typedef struct ivr_native_ext_nativescript_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	void (*ivr_nativescript_register_class)(void *p_ivrnative_handle, const char *p_name, const char *p_base, ivr_instance_create_func p_create_func, ivr_instance_destroy_func p_destroy_func);
	void (*ivr_nativescript_register_tool_class)(void *p_ivrnative_handle, const char *p_name, const char *p_base, ivr_instance_create_func p_create_func, ivr_instance_destroy_func p_destroy_func);
	void (*ivr_nativescript_register_method)(void *p_ivrnative_handle, const char *p_name, const char *p_function_name, ivr_method_attributes p_attr, ivr_instance_method p_method);
	void (*ivr_nativescript_register_property)(void *p_ivrnative_handle, const char *p_name, const char *p_path, ivr_property_attributes *p_attr, ivr_property_set_func p_set_func, ivr_property_get_func p_get_func);
	void (*ivr_nativescript_register_signal)(void *p_ivrnative_handle, const char *p_name, const ivr_signal *p_signal);
	void *(*ivr_nativescript_get_userdata)(ivr_object *p_instance);
} ivr_native_ext_nativescript_api_struct;

typedef struct ivr_native_ext_pluginscript_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	void (*ivr_pluginscript_register_language)(const ivr_pluginscript_language_desc *language_desc);
} ivr_native_ext_pluginscript_api_struct;

typedef struct ivr_native_ext_android_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	JNIEnv*(*ivr_android_get_env)();
	jobject (*ivr_android_get_activity)();
	jobject (*ivr_android_get_surface)();
	bool (*ivr_android_is_activity_resumed)();
} ivr_native_ext_android_api_struct;

typedef struct ivr_native_ext_arvr_1_2_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	void (*ivr_arvr_set_interface)(ivr_object *p_arvr_interface, const ivr_arvr_interface_ivrnative *p_ivr_interface);
	ivr_int (*ivr_arvr_get_depthid)(ivr_rid *p_render_target);
} ivr_native_ext_arvr_1_2_api_struct;

typedef struct ivr_native_ext_arvr_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	void (*ivr_arvr_register_interface)(const ivr_arvr_interface_ivrnative *p_interface);
	ivr_real (*ivr_arvr_get_worldscale)();
	ivr_transform (*ivr_arvr_get_reference_frame)();
	void (*ivr_arvr_blit)(int p_eye, ivr_rid *p_render_target, ivr_rect2 *p_screen_rect);
	ivr_int (*ivr_arvr_get_texid)(ivr_rid *p_render_target);
	ivr_int (*ivr_arvr_add_controller)(char *p_device_name, ivr_int p_hand, ivr_bool p_tracks_orientation, ivr_bool p_tracks_position);
	void (*ivr_arvr_remove_controller)(ivr_int p_controller_id);
	void (*ivr_arvr_set_controller_transform)(ivr_int p_controller_id, ivr_transform *p_transform, ivr_bool p_tracks_orientation, ivr_bool p_tracks_position);
	void (*ivr_arvr_set_controller_button)(ivr_int p_controller_id, ivr_int p_button, ivr_bool p_is_pressed);
	void (*ivr_arvr_set_controller_axis)(ivr_int p_controller_id, ivr_int p_exis, ivr_real p_value, ivr_bool p_can_be_negative);
	ivr_real (*ivr_arvr_get_controller_rumble)(ivr_int p_controller_id);
	ivr_int (*ivr_arvr_add_tracker)(char *p_device_name, const char*device_id_str, ivr_bool p_tracks_orientation, ivr_bool p_tracks_position);
	void (*ivr_arvr_remove_tracker)(ivr_int p_tracker_id);
	void (*ivr_arvr_set_tracker_transform)(ivr_int p_tracker_id, ivr_transform *p_transform, ivr_bool p_tracks_orientation, ivr_bool p_tracks_position);
	void (*ivr_arvr_set_tracker_transform_with_velocity)(ivr_int p_tracker_id, ivr_transform *p_transform, ivr_vector3 *m_linear_velocity, ivr_vector3 *m_angular_velocity, ivr_bool p_tracks_orientation, ivr_bool p_tracks_position);
	void (*ivr_arvr_set_tracker_transform_with_velocity_with_press)(ivr_int p_tracker_id, ivr_transform *p_transform, ivr_vector3 *m_linear_velocity, ivr_vector3 *m_angular_velocity, ivr_bool p_tracks_orientation, ivr_bool p_tracks_position, ivr_real p_press_value);
	void (*ivr_arvr_set_tracker_transform_with_velocity_with_press_with_tracktype)(ivr_int p_tracker_id, ivr_transform *p_transform, ivr_vector3 *m_linear_velocity, ivr_vector3 *m_angular_velocity, ivr_bool p_tracks_orientation, ivr_bool p_tracks_position, ivr_real p_press_value, ivr_int p_tracker_type);
} ivr_native_ext_arvr_api_struct;

typedef struct ivr_native_ext_videodecoder_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	ivr_int (*ivr_videodecoder_file_read)(void *file_ptr, uint8_t *buf, int buf_size);
	int64_t (*ivr_videodecoder_file_seek)(void *file_ptr, int64_t pos, int whence);
	void (*ivr_videodecoder_register_decoder)(const ivr_videodecoder_interface_ivrnative *p_interface);
} ivr_native_ext_videodecoder_api_struct;

typedef struct ivr_native_ext_net_3_2_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	ivr_error (*ivr_net_set_webrtc_library)(const ivr_net_webrtc_library *p_library);
	void (*ivr_net_bind_webrtc_peer_connection)(ivr_object *p_obj, const ivr_net_webrtc_peer_connection *p_interface);
	void (*ivr_net_bind_webrtc_data_channel)(ivr_object *p_obj, const ivr_net_webrtc_data_channel *p_interface);
} ivr_native_ext_net_3_2_api_struct;

typedef struct ivr_native_ext_net_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	void (*ivr_net_bind_stream_peer)(ivr_object *p_obj, const ivr_net_stream_peer *p_interface);
	void (*ivr_net_bind_packet_peer)(ivr_object *p_obj, const ivr_net_packet_peer *p_interface);
	void (*ivr_net_bind_multiplayer_peer)(ivr_object *p_obj, const ivr_net_multiplayer_peer *p_interface);
} ivr_native_ext_net_api_struct;

typedef struct ivr_native_core_1_2_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	ivr_dictionary (*ivr_dictionary_duplicate)(const ivr_dictionary *p_self, const ivr_bool p_deep);
	ivr_vector3 (*ivr_vector3_move_toward)(const ivr_vector3 *p_self, const ivr_vector3 *p_to, const ivr_real p_delta);
	ivr_vector2 (*ivr_vector2_move_toward)(const ivr_vector2 *p_self, const ivr_vector2 *p_to, const ivr_real p_delta);
	ivr_int (*ivr_string_count)(const ivr_string *p_self, ivr_string p_what, ivr_int p_from, ivr_int p_to);
	ivr_int (*ivr_string_countn)(const ivr_string *p_self, ivr_string p_what, ivr_int p_from, ivr_int p_to);
	ivr_vector3 (*ivr_vector3_direction_to)(const ivr_vector3 *p_self, const ivr_vector3 *p_to);
	ivr_vector2 (*ivr_vector2_direction_to)(const ivr_vector2 *p_self, const ivr_vector2 *p_to);
	ivr_array (*ivr_array_slice)(const ivr_array *p_self, const ivr_int p_begin, const ivr_int p_end, const ivr_int p_step, const ivr_bool p_deep);
	ivr_bool (*ivr_pool_byte_array_empty)(const ivr_pool_byte_array *p_self);
	ivr_bool (*ivr_pool_int_array_empty)(const ivr_pool_int_array *p_self);
	ivr_bool (*ivr_pool_real_array_empty)(const ivr_pool_real_array *p_self);
	ivr_bool (*ivr_pool_string_array_empty)(const ivr_pool_string_array *p_self);
	ivr_bool (*ivr_pool_vector2_array_empty)(const ivr_pool_vector2_array *p_self);
	ivr_bool (*ivr_pool_vector3_array_empty)(const ivr_pool_vector3_array *p_self);
	ivr_bool (*ivr_pool_color_array_empty)(const ivr_pool_color_array *p_self);
	void *(*ivr_get_class_tag)(const ivr_string_name *p_class);
	ivr_object *(*ivr_object_cast_to)(const ivr_object *p_object, void *p_class_tag);
	ivr_object *(*ivr_instance_from_id)(ivr_int p_instance_id);
} ivr_native_core_1_2_api_struct;

typedef struct ivr_native_core_1_1_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	ivr_int (*ivr_color_to_abgr32)(const ivr_color *p_self);
	ivr_int (*ivr_color_to_abgr64)(const ivr_color *p_self);
	ivr_int (*ivr_color_to_argb64)(const ivr_color *p_self);
	ivr_int (*ivr_color_to_rgba64)(const ivr_color *p_self);
	ivr_color (*ivr_color_darkened)(const ivr_color *p_self, const ivr_real p_amount);
	ivr_color (*ivr_color_from_hsv)(const ivr_color *p_self, const ivr_real p_h, const ivr_real p_s, const ivr_real p_v, const ivr_real p_a);
	ivr_color (*ivr_color_lightened)(const ivr_color *p_self, const ivr_real p_amount);
	ivr_array (*ivr_array_duplicate)(const ivr_array *p_self, const ivr_bool p_deep);
	ivr_variant (*ivr_array_max)(const ivr_array *p_self);
	ivr_variant (*ivr_array_min)(const ivr_array *p_self);
	void (*ivr_array_shuffle)(ivr_array *p_self);
	ivr_basis (*ivr_basis_slerp)(const ivr_basis *p_self, const ivr_basis *p_b, const ivr_real p_t);
	ivr_variant (*ivr_dictionary_get_with_default)(const ivr_dictionary *p_self, const ivr_variant *p_key, const ivr_variant *p_default);
	bool (*ivr_dictionary_erase_with_return)(ivr_dictionary *p_self, const ivr_variant *p_key);
	ivr_node_path (*ivr_node_path_get_as_property_path)(const ivr_node_path *p_self);
	void (*ivr_quat_set_axis_angle)(ivr_quat *p_self, const ivr_vector3 *p_axis, const ivr_real p_angle);
	ivr_rect2 (*ivr_rect2_grow_individual)(const ivr_rect2 *p_self, const ivr_real p_left, const ivr_real p_top, const ivr_real p_right, const ivr_real p_bottom);
	ivr_rect2 (*ivr_rect2_grow_margin)(const ivr_rect2 *p_self, const ivr_int p_margin, const ivr_real p_by);
	ivr_rect2 (*ivr_rect2_abs)(const ivr_rect2 *p_self);
	ivr_string (*ivr_string_dedent)(const ivr_string *p_self);
	ivr_string (*ivr_string_trim_prefix)(const ivr_string *p_self, const ivr_string *p_prefix);
	ivr_string (*ivr_string_trim_suffix)(const ivr_string *p_self, const ivr_string *p_suffix);
	ivr_string (*ivr_string_rstrip)(const ivr_string *p_self, const ivr_string *p_chars);
	ivr_pool_string_array (*ivr_string_rsplit)(const ivr_string *p_self, const ivr_string *p_divisor, const ivr_bool p_allow_empty, const ivr_int p_maxsplit);
	ivr_quat (*ivr_basis_get_quat)(const ivr_basis *p_self);
	void (*ivr_basis_set_quat)(ivr_basis *p_self, const ivr_quat *p_quat);
	void (*ivr_basis_set_axis_angle_scale)(ivr_basis *p_self, const ivr_vector3 *p_axis, ivr_real p_phi, const ivr_vector3 *p_scale);
	void (*ivr_basis_set_euler_scale)(ivr_basis *p_self, const ivr_vector3 *p_euler, const ivr_vector3 *p_scale);
	void (*ivr_basis_set_quat_scale)(ivr_basis *p_self, const ivr_quat *p_quat, const ivr_vector3 *p_scale);
	bool (*ivr_is_instance_valid)(const ivr_object *p_object);
	void (*ivr_quat_new_with_basis)(ivr_quat *r_dest, const ivr_basis *p_basis);
	void (*ivr_quat_new_with_euler)(ivr_quat *r_dest, const ivr_vector3 *p_euler);
	void (*ivr_transform_new_with_quat)(ivr_transform *r_dest, const ivr_quat *p_quat);
	ivr_string (*ivr_variant_get_operator_name)(ivr_variant_operator p_op);
	void (*ivr_variant_evaluate)(ivr_variant_operator p_op, const ivr_variant *p_a, const ivr_variant *p_b, ivr_variant *r_ret, ivr_bool *r_valid);
} ivr_native_core_1_1_api_struct;

typedef struct ivr_native_core_api_struct {
	unsigned int type;
	ivr_native_api_version version;
	const ivr_native_api_struct *next;
	unsigned int num_extensions;
	const ivr_native_api_struct **extensions;
	void (*ivr_color_new_rgba)(ivr_color *r_dest, const ivr_real p_r, const ivr_real p_g, const ivr_real p_b, const ivr_real p_a);
	void (*ivr_color_new_rgb)(ivr_color *r_dest, const ivr_real p_r, const ivr_real p_g, const ivr_real p_b);
	ivr_real (*ivr_color_get_r)(const ivr_color *p_self);
	void (*ivr_color_set_r)(ivr_color *p_self, const ivr_real r);
	ivr_real (*ivr_color_get_g)(const ivr_color *p_self);
	void (*ivr_color_set_g)(ivr_color *p_self, const ivr_real g);
	ivr_real (*ivr_color_get_b)(const ivr_color *p_self);
	void (*ivr_color_set_b)(ivr_color *p_self, const ivr_real b);
	ivr_real (*ivr_color_get_a)(const ivr_color *p_self);
	void (*ivr_color_set_a)(ivr_color *p_self, const ivr_real a);
	ivr_real (*ivr_color_get_h)(const ivr_color *p_self);
	ivr_real (*ivr_color_get_s)(const ivr_color *p_self);
	ivr_real (*ivr_color_get_v)(const ivr_color *p_self);
	ivr_string (*ivr_color_as_string)(const ivr_color *p_self);
	ivr_int (*ivr_color_to_rgba32)(const ivr_color *p_self);
	ivr_int (*ivr_color_to_argb32)(const ivr_color *p_self);
	ivr_real (*ivr_color_gray)(const ivr_color *p_self);
	ivr_color (*ivr_color_inverted)(const ivr_color *p_self);
	ivr_color (*ivr_color_contrasted)(const ivr_color *p_self);
	ivr_color (*ivr_color_linear_interpolate)(const ivr_color *p_self, const ivr_color *p_b, const ivr_real p_t);
	ivr_color (*ivr_color_blend)(const ivr_color *p_self, const ivr_color *p_over);
	ivr_string (*ivr_color_to_html)(const ivr_color *p_self, const ivr_bool p_with_alpha);
	ivr_bool (*ivr_color_operator_equal)(const ivr_color *p_self, const ivr_color *p_b);
	ivr_bool (*ivr_color_operator_less)(const ivr_color *p_self, const ivr_color *p_b);
	void (*ivr_vector2_new)(ivr_vector2 *r_dest, const ivr_real p_x, const ivr_real p_y);
	ivr_string (*ivr_vector2_as_string)(const ivr_vector2 *p_self);
	ivr_vector2 (*ivr_vector2_normalized)(const ivr_vector2 *p_self);
	ivr_real (*ivr_vector2_length)(const ivr_vector2 *p_self);
	ivr_real (*ivr_vector2_angle)(const ivr_vector2 *p_self);
	ivr_real (*ivr_vector2_length_squared)(const ivr_vector2 *p_self);
	ivr_bool (*ivr_vector2_is_normalized)(const ivr_vector2 *p_self);
	ivr_real (*ivr_vector2_distance_to)(const ivr_vector2 *p_self, const ivr_vector2 *p_to);
	ivr_real (*ivr_vector2_distance_squared_to)(const ivr_vector2 *p_self, const ivr_vector2 *p_to);
	ivr_real (*ivr_vector2_angle_to)(const ivr_vector2 *p_self, const ivr_vector2 *p_to);
	ivr_real (*ivr_vector2_angle_to_point)(const ivr_vector2 *p_self, const ivr_vector2 *p_to);
	ivr_vector2 (*ivr_vector2_linear_interpolate)(const ivr_vector2 *p_self, const ivr_vector2 *p_b, const ivr_real p_t);
	ivr_vector2 (*ivr_vector2_cubic_interpolate)(const ivr_vector2 *p_self, const ivr_vector2 *p_b, const ivr_vector2 *p_pre_a, const ivr_vector2 *p_post_b, const ivr_real p_t);
	ivr_vector2 (*ivr_vector2_rotated)(const ivr_vector2 *p_self, const ivr_real p_phi);
	ivr_vector2 (*ivr_vector2_tangent)(const ivr_vector2 *p_self);
	ivr_vector2 (*ivr_vector2_floor)(const ivr_vector2 *p_self);
	ivr_vector2 (*ivr_vector2_snapped)(const ivr_vector2 *p_self, const ivr_vector2 *p_by);
	ivr_real (*ivr_vector2_aspect)(const ivr_vector2 *p_self);
	ivr_real (*ivr_vector2_dot)(const ivr_vector2 *p_self, const ivr_vector2 *p_with);
	ivr_vector2 (*ivr_vector2_slide)(const ivr_vector2 *p_self, const ivr_vector2 *p_n);
	ivr_vector2 (*ivr_vector2_bounce)(const ivr_vector2 *p_self, const ivr_vector2 *p_n);
	ivr_vector2 (*ivr_vector2_reflect)(const ivr_vector2 *p_self, const ivr_vector2 *p_n);
	ivr_vector2 (*ivr_vector2_abs)(const ivr_vector2 *p_self);
	ivr_vector2 (*ivr_vector2_clamped)(const ivr_vector2 *p_self, const ivr_real p_length);
	ivr_vector2 (*ivr_vector2_operator_add)(const ivr_vector2 *p_self, const ivr_vector2 *p_b);
	ivr_vector2 (*ivr_vector2_operator_subtract)(const ivr_vector2 *p_self, const ivr_vector2 *p_b);
	ivr_vector2 (*ivr_vector2_operator_multiply_vector)(const ivr_vector2 *p_self, const ivr_vector2 *p_b);
	ivr_vector2 (*ivr_vector2_operator_multiply_scalar)(const ivr_vector2 *p_self, const ivr_real p_b);
	ivr_vector2 (*ivr_vector2_operator_divide_vector)(const ivr_vector2 *p_self, const ivr_vector2 *p_b);
	ivr_vector2 (*ivr_vector2_operator_divide_scalar)(const ivr_vector2 *p_self, const ivr_real p_b);
	ivr_bool (*ivr_vector2_operator_equal)(const ivr_vector2 *p_self, const ivr_vector2 *p_b);
	ivr_bool (*ivr_vector2_operator_less)(const ivr_vector2 *p_self, const ivr_vector2 *p_b);
	ivr_vector2 (*ivr_vector2_operator_neg)(const ivr_vector2 *p_self);
	void (*ivr_vector2_set_x)(ivr_vector2 *p_self, const ivr_real p_x);
	void (*ivr_vector2_set_y)(ivr_vector2 *p_self, const ivr_real p_y);
	ivr_real (*ivr_vector2_get_x)(const ivr_vector2 *p_self);
	ivr_real (*ivr_vector2_get_y)(const ivr_vector2 *p_self);
	void (*ivr_quat_new)(ivr_quat *r_dest, const ivr_real p_x, const ivr_real p_y, const ivr_real p_z, const ivr_real p_w);
	void (*ivr_quat_new_with_axis_angle)(ivr_quat *r_dest, const ivr_vector3 *p_axis, const ivr_real p_angle);
	ivr_real (*ivr_quat_get_x)(const ivr_quat *p_self);
	void (*ivr_quat_set_x)(ivr_quat *p_self, const ivr_real val);
	ivr_real (*ivr_quat_get_y)(const ivr_quat *p_self);
	void (*ivr_quat_set_y)(ivr_quat *p_self, const ivr_real val);
	ivr_real (*ivr_quat_get_z)(const ivr_quat *p_self);
	void (*ivr_quat_set_z)(ivr_quat *p_self, const ivr_real val);
	ivr_real (*ivr_quat_get_w)(const ivr_quat *p_self);
	void (*ivr_quat_set_w)(ivr_quat *p_self, const ivr_real val);
	ivr_string (*ivr_quat_as_string)(const ivr_quat *p_self);
	ivr_real (*ivr_quat_length)(const ivr_quat *p_self);
	ivr_real (*ivr_quat_length_squared)(const ivr_quat *p_self);
	ivr_quat (*ivr_quat_normalized)(const ivr_quat *p_self);
	ivr_bool (*ivr_quat_is_normalized)(const ivr_quat *p_self);
	ivr_quat (*ivr_quat_inverse)(const ivr_quat *p_self);
	ivr_real (*ivr_quat_dot)(const ivr_quat *p_self, const ivr_quat *p_b);
	ivr_vector3 (*ivr_quat_xform)(const ivr_quat *p_self, const ivr_vector3 *p_v);
	ivr_quat (*ivr_quat_slerp)(const ivr_quat *p_self, const ivr_quat *p_b, const ivr_real p_t);
	ivr_quat (*ivr_quat_slerpni)(const ivr_quat *p_self, const ivr_quat *p_b, const ivr_real p_t);
	ivr_quat (*ivr_quat_cubic_slerp)(const ivr_quat *p_self, const ivr_quat *p_b, const ivr_quat *p_pre_a, const ivr_quat *p_post_b, const ivr_real p_t);
	ivr_quat (*ivr_quat_operator_multiply)(const ivr_quat *p_self, const ivr_real p_b);
	ivr_quat (*ivr_quat_operator_add)(const ivr_quat *p_self, const ivr_quat *p_b);
	ivr_quat (*ivr_quat_operator_subtract)(const ivr_quat *p_self, const ivr_quat *p_b);
	ivr_quat (*ivr_quat_operator_divide)(const ivr_quat *p_self, const ivr_real p_b);
	ivr_bool (*ivr_quat_operator_equal)(const ivr_quat *p_self, const ivr_quat *p_b);
	ivr_quat (*ivr_quat_operator_neg)(const ivr_quat *p_self);
	void (*ivr_basis_new_with_rows)(ivr_basis *r_dest, const ivr_vector3 *p_x_axis, const ivr_vector3 *p_y_axis, const ivr_vector3 *p_z_axis);
	void (*ivr_basis_new_with_axis_and_angle)(ivr_basis *r_dest, const ivr_vector3 *p_axis, const ivr_real p_phi);
	void (*ivr_basis_new_with_euler)(ivr_basis *r_dest, const ivr_vector3 *p_euler);
	ivr_string (*ivr_basis_as_string)(const ivr_basis *p_self);
	ivr_basis (*ivr_basis_inverse)(const ivr_basis *p_self);
	ivr_basis (*ivr_basis_transposed)(const ivr_basis *p_self);
	ivr_basis (*ivr_basis_orthonormalized)(const ivr_basis *p_self);
	ivr_real (*ivr_basis_determinant)(const ivr_basis *p_self);
	ivr_basis (*ivr_basis_rotated)(const ivr_basis *p_self, const ivr_vector3 *p_axis, const ivr_real p_phi);
	ivr_basis (*ivr_basis_scaled)(const ivr_basis *p_self, const ivr_vector3 *p_scale);
	ivr_vector3 (*ivr_basis_get_scale)(const ivr_basis *p_self);
	ivr_vector3 (*ivr_basis_get_euler)(const ivr_basis *p_self);
	ivr_real (*ivr_basis_tdotx)(const ivr_basis *p_self, const ivr_vector3 *p_with);
	ivr_real (*ivr_basis_tdoty)(const ivr_basis *p_self, const ivr_vector3 *p_with);
	ivr_real (*ivr_basis_tdotz)(const ivr_basis *p_self, const ivr_vector3 *p_with);
	ivr_vector3 (*ivr_basis_xform)(const ivr_basis *p_self, const ivr_vector3 *p_v);
	ivr_vector3 (*ivr_basis_xform_inv)(const ivr_basis *p_self, const ivr_vector3 *p_v);
	ivr_int (*ivr_basis_get_orthogonal_index)(const ivr_basis *p_self);
	void (*ivr_basis_new)(ivr_basis *r_dest);
	void (*ivr_basis_new_with_euler_quat)(ivr_basis *r_dest, const ivr_quat *p_euler);
	void (*ivr_basis_get_elements)(const ivr_basis *p_self, ivr_vector3 *p_elements);
	ivr_vector3 (*ivr_basis_get_axis)(const ivr_basis *p_self, const ivr_int p_axis);
	void (*ivr_basis_set_axis)(ivr_basis *p_self, const ivr_int p_axis, const ivr_vector3 *p_value);
	ivr_vector3 (*ivr_basis_get_row)(const ivr_basis *p_self, const ivr_int p_row);
	void (*ivr_basis_set_row)(ivr_basis *p_self, const ivr_int p_row, const ivr_vector3 *p_value);
	ivr_bool (*ivr_basis_operator_equal)(const ivr_basis *p_self, const ivr_basis *p_b);
	ivr_basis (*ivr_basis_operator_add)(const ivr_basis *p_self, const ivr_basis *p_b);
	ivr_basis (*ivr_basis_operator_subtract)(const ivr_basis *p_self, const ivr_basis *p_b);
	ivr_basis (*ivr_basis_operator_multiply_vector)(const ivr_basis *p_self, const ivr_basis *p_b);
	ivr_basis (*ivr_basis_operator_multiply_scalar)(const ivr_basis *p_self, const ivr_real p_b);
	void (*ivr_vector3_new)(ivr_vector3 *r_dest, const ivr_real p_x, const ivr_real p_y, const ivr_real p_z);
	ivr_string (*ivr_vector3_as_string)(const ivr_vector3 *p_self);
	ivr_int (*ivr_vector3_min_axis)(const ivr_vector3 *p_self);
	ivr_int (*ivr_vector3_max_axis)(const ivr_vector3 *p_self);
	ivr_real (*ivr_vector3_length)(const ivr_vector3 *p_self);
	ivr_real (*ivr_vector3_length_squared)(const ivr_vector3 *p_self);
	ivr_bool (*ivr_vector3_is_normalized)(const ivr_vector3 *p_self);
	ivr_vector3 (*ivr_vector3_normalized)(const ivr_vector3 *p_self);
	ivr_vector3 (*ivr_vector3_inverse)(const ivr_vector3 *p_self);
	ivr_vector3 (*ivr_vector3_snapped)(const ivr_vector3 *p_self, const ivr_vector3 *p_by);
	ivr_vector3 (*ivr_vector3_rotated)(const ivr_vector3 *p_self, const ivr_vector3 *p_axis, const ivr_real p_phi);
	ivr_vector3 (*ivr_vector3_linear_interpolate)(const ivr_vector3 *p_self, const ivr_vector3 *p_b, const ivr_real p_t);
	ivr_vector3 (*ivr_vector3_cubic_interpolate)(const ivr_vector3 *p_self, const ivr_vector3 *p_b, const ivr_vector3 *p_pre_a, const ivr_vector3 *p_post_b, const ivr_real p_t);
	ivr_real (*ivr_vector3_dot)(const ivr_vector3 *p_self, const ivr_vector3 *p_b);
	ivr_vector3 (*ivr_vector3_cross)(const ivr_vector3 *p_self, const ivr_vector3 *p_b);
	ivr_basis (*ivr_vector3_outer)(const ivr_vector3 *p_self, const ivr_vector3 *p_b);
	ivr_basis (*ivr_vector3_to_diagonal_matrix)(const ivr_vector3 *p_self);
	ivr_vector3 (*ivr_vector3_abs)(const ivr_vector3 *p_self);
	ivr_vector3 (*ivr_vector3_floor)(const ivr_vector3 *p_self);
	ivr_vector3 (*ivr_vector3_ceil)(const ivr_vector3 *p_self);
	ivr_real (*ivr_vector3_distance_to)(const ivr_vector3 *p_self, const ivr_vector3 *p_b);
	ivr_real (*ivr_vector3_distance_squared_to)(const ivr_vector3 *p_self, const ivr_vector3 *p_b);
	ivr_real (*ivr_vector3_angle_to)(const ivr_vector3 *p_self, const ivr_vector3 *p_to);
	ivr_vector3 (*ivr_vector3_slide)(const ivr_vector3 *p_self, const ivr_vector3 *p_n);
	ivr_vector3 (*ivr_vector3_bounce)(const ivr_vector3 *p_self, const ivr_vector3 *p_n);
	ivr_vector3 (*ivr_vector3_reflect)(const ivr_vector3 *p_self, const ivr_vector3 *p_n);
	ivr_vector3 (*ivr_vector3_operator_add)(const ivr_vector3 *p_self, const ivr_vector3 *p_b);
	ivr_vector3 (*ivr_vector3_operator_subtract)(const ivr_vector3 *p_self, const ivr_vector3 *p_b);
	ivr_vector3 (*ivr_vector3_operator_multiply_vector)(const ivr_vector3 *p_self, const ivr_vector3 *p_b);
	ivr_vector3 (*ivr_vector3_operator_multiply_scalar)(const ivr_vector3 *p_self, const ivr_real p_b);
	ivr_vector3 (*ivr_vector3_operator_divide_vector)(const ivr_vector3 *p_self, const ivr_vector3 *p_b);
	ivr_vector3 (*ivr_vector3_operator_divide_scalar)(const ivr_vector3 *p_self, const ivr_real p_b);
	ivr_bool (*ivr_vector3_operator_equal)(const ivr_vector3 *p_self, const ivr_vector3 *p_b);
	ivr_bool (*ivr_vector3_operator_less)(const ivr_vector3 *p_self, const ivr_vector3 *p_b);
	ivr_vector3 (*ivr_vector3_operator_neg)(const ivr_vector3 *p_self);
	void (*ivr_vector3_set_axis)(ivr_vector3 *p_self, const ivr_vector3_axis p_axis, const ivr_real p_val);
	ivr_real (*ivr_vector3_get_axis)(const ivr_vector3 *p_self, const ivr_vector3_axis p_axis);
	void (*ivr_pool_byte_array_new)(ivr_pool_byte_array *r_dest);
	void (*ivr_pool_byte_array_new_copy)(ivr_pool_byte_array *r_dest, const ivr_pool_byte_array *p_src);
	void (*ivr_pool_byte_array_new_with_array)(ivr_pool_byte_array *r_dest, const ivr_array *p_a);
	void (*ivr_pool_byte_array_append)(ivr_pool_byte_array *p_self, const uint8_t p_data);
	void (*ivr_pool_byte_array_append_array)(ivr_pool_byte_array *p_self, const ivr_pool_byte_array *p_array);
	ivr_error (*ivr_pool_byte_array_insert)(ivr_pool_byte_array *p_self, const ivr_int p_idx, const uint8_t p_data);
	void (*ivr_pool_byte_array_invert)(ivr_pool_byte_array *p_self);
	void (*ivr_pool_byte_array_push_back)(ivr_pool_byte_array *p_self, const uint8_t p_data);
	void (*ivr_pool_byte_array_remove)(ivr_pool_byte_array *p_self, const ivr_int p_idx);
	void (*ivr_pool_byte_array_resize)(ivr_pool_byte_array *p_self, const ivr_int p_size);
	ivr_pool_byte_array_read_access *(*ivr_pool_byte_array_read)(const ivr_pool_byte_array *p_self);
	ivr_pool_byte_array_write_access *(*ivr_pool_byte_array_write)(ivr_pool_byte_array *p_self);
	void (*ivr_pool_byte_array_set)(ivr_pool_byte_array *p_self, const ivr_int p_idx, const uint8_t p_data);
	uint8_t (*ivr_pool_byte_array_get)(const ivr_pool_byte_array *p_self, const ivr_int p_idx);
	ivr_int (*ivr_pool_byte_array_size)(const ivr_pool_byte_array *p_self);
	void (*ivr_pool_byte_array_destroy)(ivr_pool_byte_array *p_self);
	void (*ivr_pool_int_array_new)(ivr_pool_int_array *r_dest);
	void (*ivr_pool_int_array_new_copy)(ivr_pool_int_array *r_dest, const ivr_pool_int_array *p_src);
	void (*ivr_pool_int_array_new_with_array)(ivr_pool_int_array *r_dest, const ivr_array *p_a);
	void (*ivr_pool_int_array_append)(ivr_pool_int_array *p_self, const ivr_int p_data);
	void (*ivr_pool_int_array_append_array)(ivr_pool_int_array *p_self, const ivr_pool_int_array *p_array);
	ivr_error (*ivr_pool_int_array_insert)(ivr_pool_int_array *p_self, const ivr_int p_idx, const ivr_int p_data);
	void (*ivr_pool_int_array_invert)(ivr_pool_int_array *p_self);
	void (*ivr_pool_int_array_push_back)(ivr_pool_int_array *p_self, const ivr_int p_data);
	void (*ivr_pool_int_array_remove)(ivr_pool_int_array *p_self, const ivr_int p_idx);
	void (*ivr_pool_int_array_resize)(ivr_pool_int_array *p_self, const ivr_int p_size);
	ivr_pool_int_array_read_access *(*ivr_pool_int_array_read)(const ivr_pool_int_array *p_self);
	ivr_pool_int_array_write_access *(*ivr_pool_int_array_write)(ivr_pool_int_array *p_self);
	void (*ivr_pool_int_array_set)(ivr_pool_int_array *p_self, const ivr_int p_idx, const ivr_int p_data);
	ivr_int (*ivr_pool_int_array_get)(const ivr_pool_int_array *p_self, const ivr_int p_idx);
	ivr_int (*ivr_pool_int_array_size)(const ivr_pool_int_array *p_self);
	void (*ivr_pool_int_array_destroy)(ivr_pool_int_array *p_self);
	void (*ivr_pool_real_array_new)(ivr_pool_real_array *r_dest);
	void (*ivr_pool_real_array_new_copy)(ivr_pool_real_array *r_dest, const ivr_pool_real_array *p_src);
	void (*ivr_pool_real_array_new_with_array)(ivr_pool_real_array *r_dest, const ivr_array *p_a);
	void (*ivr_pool_real_array_append)(ivr_pool_real_array *p_self, const ivr_real p_data);
	void (*ivr_pool_real_array_append_array)(ivr_pool_real_array *p_self, const ivr_pool_real_array *p_array);
	ivr_error (*ivr_pool_real_array_insert)(ivr_pool_real_array *p_self, const ivr_int p_idx, const ivr_real p_data);
	void (*ivr_pool_real_array_invert)(ivr_pool_real_array *p_self);
	void (*ivr_pool_real_array_push_back)(ivr_pool_real_array *p_self, const ivr_real p_data);
	void (*ivr_pool_real_array_remove)(ivr_pool_real_array *p_self, const ivr_int p_idx);
	void (*ivr_pool_real_array_resize)(ivr_pool_real_array *p_self, const ivr_int p_size);
	ivr_pool_real_array_read_access *(*ivr_pool_real_array_read)(const ivr_pool_real_array *p_self);
	ivr_pool_real_array_write_access *(*ivr_pool_real_array_write)(ivr_pool_real_array *p_self);
	void (*ivr_pool_real_array_set)(ivr_pool_real_array *p_self, const ivr_int p_idx, const ivr_real p_data);
	ivr_real (*ivr_pool_real_array_get)(const ivr_pool_real_array *p_self, const ivr_int p_idx);
	ivr_int (*ivr_pool_real_array_size)(const ivr_pool_real_array *p_self);
	void (*ivr_pool_real_array_destroy)(ivr_pool_real_array *p_self);
	void (*ivr_pool_string_array_new)(ivr_pool_string_array *r_dest);
	void (*ivr_pool_string_array_new_copy)(ivr_pool_string_array *r_dest, const ivr_pool_string_array *p_src);
	void (*ivr_pool_string_array_new_with_array)(ivr_pool_string_array *r_dest, const ivr_array *p_a);
	void (*ivr_pool_string_array_append)(ivr_pool_string_array *p_self, const ivr_string *p_data);
	void (*ivr_pool_string_array_append_array)(ivr_pool_string_array *p_self, const ivr_pool_string_array *p_array);
	ivr_error (*ivr_pool_string_array_insert)(ivr_pool_string_array *p_self, const ivr_int p_idx, const ivr_string *p_data);
	void (*ivr_pool_string_array_invert)(ivr_pool_string_array *p_self);
	void (*ivr_pool_string_array_push_back)(ivr_pool_string_array *p_self, const ivr_string *p_data);
	void (*ivr_pool_string_array_remove)(ivr_pool_string_array *p_self, const ivr_int p_idx);
	void (*ivr_pool_string_array_resize)(ivr_pool_string_array *p_self, const ivr_int p_size);
	ivr_pool_string_array_read_access *(*ivr_pool_string_array_read)(const ivr_pool_string_array *p_self);
	ivr_pool_string_array_write_access *(*ivr_pool_string_array_write)(ivr_pool_string_array *p_self);
	void (*ivr_pool_string_array_set)(ivr_pool_string_array *p_self, const ivr_int p_idx, const ivr_string *p_data);
	ivr_string (*ivr_pool_string_array_get)(const ivr_pool_string_array *p_self, const ivr_int p_idx);
	ivr_int (*ivr_pool_string_array_size)(const ivr_pool_string_array *p_self);
	void (*ivr_pool_string_array_destroy)(ivr_pool_string_array *p_self);
	void (*ivr_pool_vector2_array_new)(ivr_pool_vector2_array *r_dest);
	void (*ivr_pool_vector2_array_new_copy)(ivr_pool_vector2_array *r_dest, const ivr_pool_vector2_array *p_src);
	void (*ivr_pool_vector2_array_new_with_array)(ivr_pool_vector2_array *r_dest, const ivr_array *p_a);
	void (*ivr_pool_vector2_array_append)(ivr_pool_vector2_array *p_self, const ivr_vector2 *p_data);
	void (*ivr_pool_vector2_array_append_array)(ivr_pool_vector2_array *p_self, const ivr_pool_vector2_array *p_array);
	ivr_error (*ivr_pool_vector2_array_insert)(ivr_pool_vector2_array *p_self, const ivr_int p_idx, const ivr_vector2 *p_data);
	void (*ivr_pool_vector2_array_invert)(ivr_pool_vector2_array *p_self);
	void (*ivr_pool_vector2_array_push_back)(ivr_pool_vector2_array *p_self, const ivr_vector2 *p_data);
	void (*ivr_pool_vector2_array_remove)(ivr_pool_vector2_array *p_self, const ivr_int p_idx);
	void (*ivr_pool_vector2_array_resize)(ivr_pool_vector2_array *p_self, const ivr_int p_size);
	ivr_pool_vector2_array_read_access *(*ivr_pool_vector2_array_read)(const ivr_pool_vector2_array *p_self);
	ivr_pool_vector2_array_write_access *(*ivr_pool_vector2_array_write)(ivr_pool_vector2_array *p_self);
	void (*ivr_pool_vector2_array_set)(ivr_pool_vector2_array *p_self, const ivr_int p_idx, const ivr_vector2 *p_data);
	ivr_vector2 (*ivr_pool_vector2_array_get)(const ivr_pool_vector2_array *p_self, const ivr_int p_idx);
	ivr_int (*ivr_pool_vector2_array_size)(const ivr_pool_vector2_array *p_self);
	void (*ivr_pool_vector2_array_destroy)(ivr_pool_vector2_array *p_self);
	void (*ivr_pool_vector3_array_new)(ivr_pool_vector3_array *r_dest);
	void (*ivr_pool_vector3_array_new_copy)(ivr_pool_vector3_array *r_dest, const ivr_pool_vector3_array *p_src);
	void (*ivr_pool_vector3_array_new_with_array)(ivr_pool_vector3_array *r_dest, const ivr_array *p_a);
	void (*ivr_pool_vector3_array_append)(ivr_pool_vector3_array *p_self, const ivr_vector3 *p_data);
	void (*ivr_pool_vector3_array_append_array)(ivr_pool_vector3_array *p_self, const ivr_pool_vector3_array *p_array);
	ivr_error (*ivr_pool_vector3_array_insert)(ivr_pool_vector3_array *p_self, const ivr_int p_idx, const ivr_vector3 *p_data);
	void (*ivr_pool_vector3_array_invert)(ivr_pool_vector3_array *p_self);
	void (*ivr_pool_vector3_array_push_back)(ivr_pool_vector3_array *p_self, const ivr_vector3 *p_data);
	void (*ivr_pool_vector3_array_remove)(ivr_pool_vector3_array *p_self, const ivr_int p_idx);
	void (*ivr_pool_vector3_array_resize)(ivr_pool_vector3_array *p_self, const ivr_int p_size);
	ivr_pool_vector3_array_read_access *(*ivr_pool_vector3_array_read)(const ivr_pool_vector3_array *p_self);
	ivr_pool_vector3_array_write_access *(*ivr_pool_vector3_array_write)(ivr_pool_vector3_array *p_self);
	void (*ivr_pool_vector3_array_set)(ivr_pool_vector3_array *p_self, const ivr_int p_idx, const ivr_vector3 *p_data);
	ivr_vector3 (*ivr_pool_vector3_array_get)(const ivr_pool_vector3_array *p_self, const ivr_int p_idx);
	ivr_int (*ivr_pool_vector3_array_size)(const ivr_pool_vector3_array *p_self);
	void (*ivr_pool_vector3_array_destroy)(ivr_pool_vector3_array *p_self);
	void (*ivr_pool_color_array_new)(ivr_pool_color_array *r_dest);
	void (*ivr_pool_color_array_new_copy)(ivr_pool_color_array *r_dest, const ivr_pool_color_array *p_src);
	void (*ivr_pool_color_array_new_with_array)(ivr_pool_color_array *r_dest, const ivr_array *p_a);
	void (*ivr_pool_color_array_append)(ivr_pool_color_array *p_self, const ivr_color *p_data);
	void (*ivr_pool_color_array_append_array)(ivr_pool_color_array *p_self, const ivr_pool_color_array *p_array);
	ivr_error (*ivr_pool_color_array_insert)(ivr_pool_color_array *p_self, const ivr_int p_idx, const ivr_color *p_data);
	void (*ivr_pool_color_array_invert)(ivr_pool_color_array *p_self);
	void (*ivr_pool_color_array_push_back)(ivr_pool_color_array *p_self, const ivr_color *p_data);
	void (*ivr_pool_color_array_remove)(ivr_pool_color_array *p_self, const ivr_int p_idx);
	void (*ivr_pool_color_array_resize)(ivr_pool_color_array *p_self, const ivr_int p_size);
	ivr_pool_color_array_read_access *(*ivr_pool_color_array_read)(const ivr_pool_color_array *p_self);
	ivr_pool_color_array_write_access *(*ivr_pool_color_array_write)(ivr_pool_color_array *p_self);
	void (*ivr_pool_color_array_set)(ivr_pool_color_array *p_self, const ivr_int p_idx, const ivr_color *p_data);
	ivr_color (*ivr_pool_color_array_get)(const ivr_pool_color_array *p_self, const ivr_int p_idx);
	ivr_int (*ivr_pool_color_array_size)(const ivr_pool_color_array *p_self);
	void (*ivr_pool_color_array_destroy)(ivr_pool_color_array *p_self);
	ivr_pool_byte_array_read_access *(*ivr_pool_byte_array_read_access_copy)(const ivr_pool_byte_array_read_access *p_read);
	const uint8_t *(*ivr_pool_byte_array_read_access_ptr)(const ivr_pool_byte_array_read_access *p_read);
	void (*ivr_pool_byte_array_read_access_operator_assign)(ivr_pool_byte_array_read_access *p_read, ivr_pool_byte_array_read_access *p_other);
	void (*ivr_pool_byte_array_read_access_destroy)(ivr_pool_byte_array_read_access *p_read);
	ivr_pool_int_array_read_access *(*ivr_pool_int_array_read_access_copy)(const ivr_pool_int_array_read_access *p_read);
	const ivr_int *(*ivr_pool_int_array_read_access_ptr)(const ivr_pool_int_array_read_access *p_read);
	void (*ivr_pool_int_array_read_access_operator_assign)(ivr_pool_int_array_read_access *p_read, ivr_pool_int_array_read_access *p_other);
	void (*ivr_pool_int_array_read_access_destroy)(ivr_pool_int_array_read_access *p_read);
	ivr_pool_real_array_read_access *(*ivr_pool_real_array_read_access_copy)(const ivr_pool_real_array_read_access *p_read);
	const ivr_real *(*ivr_pool_real_array_read_access_ptr)(const ivr_pool_real_array_read_access *p_read);
	void (*ivr_pool_real_array_read_access_operator_assign)(ivr_pool_real_array_read_access *p_read, ivr_pool_real_array_read_access *p_other);
	void (*ivr_pool_real_array_read_access_destroy)(ivr_pool_real_array_read_access *p_read);
	ivr_pool_string_array_read_access *(*ivr_pool_string_array_read_access_copy)(const ivr_pool_string_array_read_access *p_read);
	const ivr_string *(*ivr_pool_string_array_read_access_ptr)(const ivr_pool_string_array_read_access *p_read);
	void (*ivr_pool_string_array_read_access_operator_assign)(ivr_pool_string_array_read_access *p_read, ivr_pool_string_array_read_access *p_other);
	void (*ivr_pool_string_array_read_access_destroy)(ivr_pool_string_array_read_access *p_read);
	ivr_pool_vector2_array_read_access *(*ivr_pool_vector2_array_read_access_copy)(const ivr_pool_vector2_array_read_access *p_read);
	const ivr_vector2 *(*ivr_pool_vector2_array_read_access_ptr)(const ivr_pool_vector2_array_read_access *p_read);
	void (*ivr_pool_vector2_array_read_access_operator_assign)(ivr_pool_vector2_array_read_access *p_read, ivr_pool_vector2_array_read_access *p_other);
	void (*ivr_pool_vector2_array_read_access_destroy)(ivr_pool_vector2_array_read_access *p_read);
	ivr_pool_vector3_array_read_access *(*ivr_pool_vector3_array_read_access_copy)(const ivr_pool_vector3_array_read_access *p_read);
	const ivr_vector3 *(*ivr_pool_vector3_array_read_access_ptr)(const ivr_pool_vector3_array_read_access *p_read);
	void (*ivr_pool_vector3_array_read_access_operator_assign)(ivr_pool_vector3_array_read_access *p_read, ivr_pool_vector3_array_read_access *p_other);
	void (*ivr_pool_vector3_array_read_access_destroy)(ivr_pool_vector3_array_read_access *p_read);
	ivr_pool_color_array_read_access *(*ivr_pool_color_array_read_access_copy)(const ivr_pool_color_array_read_access *p_read);
	const ivr_color *(*ivr_pool_color_array_read_access_ptr)(const ivr_pool_color_array_read_access *p_read);
	void (*ivr_pool_color_array_read_access_operator_assign)(ivr_pool_color_array_read_access *p_read, ivr_pool_color_array_read_access *p_other);
	void (*ivr_pool_color_array_read_access_destroy)(ivr_pool_color_array_read_access *p_read);
	ivr_pool_byte_array_write_access *(*ivr_pool_byte_array_write_access_copy)(const ivr_pool_byte_array_write_access *p_write);
	uint8_t *(*ivr_pool_byte_array_write_access_ptr)(const ivr_pool_byte_array_write_access *p_write);
	void (*ivr_pool_byte_array_write_access_operator_assign)(ivr_pool_byte_array_write_access *p_write, ivr_pool_byte_array_write_access *p_other);
	void (*ivr_pool_byte_array_write_access_destroy)(ivr_pool_byte_array_write_access *p_write);
	ivr_pool_int_array_write_access *(*ivr_pool_int_array_write_access_copy)(const ivr_pool_int_array_write_access *p_write);
	ivr_int *(*ivr_pool_int_array_write_access_ptr)(const ivr_pool_int_array_write_access *p_write);
	void (*ivr_pool_int_array_write_access_operator_assign)(ivr_pool_int_array_write_access *p_write, ivr_pool_int_array_write_access *p_other);
	void (*ivr_pool_int_array_write_access_destroy)(ivr_pool_int_array_write_access *p_write);
	ivr_pool_real_array_write_access *(*ivr_pool_real_array_write_access_copy)(const ivr_pool_real_array_write_access *p_write);
	ivr_real *(*ivr_pool_real_array_write_access_ptr)(const ivr_pool_real_array_write_access *p_write);
	void (*ivr_pool_real_array_write_access_operator_assign)(ivr_pool_real_array_write_access *p_write, ivr_pool_real_array_write_access *p_other);
	void (*ivr_pool_real_array_write_access_destroy)(ivr_pool_real_array_write_access *p_write);
	ivr_pool_string_array_write_access *(*ivr_pool_string_array_write_access_copy)(const ivr_pool_string_array_write_access *p_write);
	ivr_string *(*ivr_pool_string_array_write_access_ptr)(const ivr_pool_string_array_write_access *p_write);
	void (*ivr_pool_string_array_write_access_operator_assign)(ivr_pool_string_array_write_access *p_write, ivr_pool_string_array_write_access *p_other);
	void (*ivr_pool_string_array_write_access_destroy)(ivr_pool_string_array_write_access *p_write);
	ivr_pool_vector2_array_write_access *(*ivr_pool_vector2_array_write_access_copy)(const ivr_pool_vector2_array_write_access *p_write);
	ivr_vector2 *(*ivr_pool_vector2_array_write_access_ptr)(const ivr_pool_vector2_array_write_access *p_write);
	void (*ivr_pool_vector2_array_write_access_operator_assign)(ivr_pool_vector2_array_write_access *p_write, ivr_pool_vector2_array_write_access *p_other);
	void (*ivr_pool_vector2_array_write_access_destroy)(ivr_pool_vector2_array_write_access *p_write);
	ivr_pool_vector3_array_write_access *(*ivr_pool_vector3_array_write_access_copy)(const ivr_pool_vector3_array_write_access *p_write);
	ivr_vector3 *(*ivr_pool_vector3_array_write_access_ptr)(const ivr_pool_vector3_array_write_access *p_write);
	void (*ivr_pool_vector3_array_write_access_operator_assign)(ivr_pool_vector3_array_write_access *p_write, ivr_pool_vector3_array_write_access *p_other);
	void (*ivr_pool_vector3_array_write_access_destroy)(ivr_pool_vector3_array_write_access *p_write);
	ivr_pool_color_array_write_access *(*ivr_pool_color_array_write_access_copy)(const ivr_pool_color_array_write_access *p_write);
	ivr_color *(*ivr_pool_color_array_write_access_ptr)(const ivr_pool_color_array_write_access *p_write);
	void (*ivr_pool_color_array_write_access_operator_assign)(ivr_pool_color_array_write_access *p_write, ivr_pool_color_array_write_access *p_other);
	void (*ivr_pool_color_array_write_access_destroy)(ivr_pool_color_array_write_access *p_write);
	void (*ivr_array_new)(ivr_array *r_dest);
	void (*ivr_array_new_copy)(ivr_array *r_dest, const ivr_array *p_src);
	void (*ivr_array_new_pool_color_array)(ivr_array *r_dest, const ivr_pool_color_array *p_pca);
	void (*ivr_array_new_pool_vector3_array)(ivr_array *r_dest, const ivr_pool_vector3_array *p_pv3a);
	void (*ivr_array_new_pool_vector2_array)(ivr_array *r_dest, const ivr_pool_vector2_array *p_pv2a);
	void (*ivr_array_new_pool_string_array)(ivr_array *r_dest, const ivr_pool_string_array *p_psa);
	void (*ivr_array_new_pool_real_array)(ivr_array *r_dest, const ivr_pool_real_array *p_pra);
	void (*ivr_array_new_pool_int_array)(ivr_array *r_dest, const ivr_pool_int_array *p_pia);
	void (*ivr_array_new_pool_byte_array)(ivr_array *r_dest, const ivr_pool_byte_array *p_pba);
	void (*ivr_array_set)(ivr_array *p_self, const ivr_int p_idx, const ivr_variant *p_value);
	ivr_variant (*ivr_array_get)(const ivr_array *p_self, const ivr_int p_idx);
	ivr_variant *(*ivr_array_operator_index)(ivr_array *p_self, const ivr_int p_idx);
	const ivr_variant *(*ivr_array_operator_index_const)(const ivr_array *p_self, const ivr_int p_idx);
	void (*ivr_array_append)(ivr_array *p_self, const ivr_variant *p_value);
	void (*ivr_array_clear)(ivr_array *p_self);
	ivr_int (*ivr_array_count)(const ivr_array *p_self, const ivr_variant *p_value);
	ivr_bool (*ivr_array_empty)(const ivr_array *p_self);
	void (*ivr_array_erase)(ivr_array *p_self, const ivr_variant *p_value);
	ivr_variant (*ivr_array_front)(const ivr_array *p_self);
	ivr_variant (*ivr_array_back)(const ivr_array *p_self);
	ivr_int (*ivr_array_find)(const ivr_array *p_self, const ivr_variant *p_what, const ivr_int p_from);
	ivr_int (*ivr_array_find_last)(const ivr_array *p_self, const ivr_variant *p_what);
	ivr_bool (*ivr_array_has)(const ivr_array *p_self, const ivr_variant *p_value);
	ivr_int (*ivr_array_hash)(const ivr_array *p_self);
	void (*ivr_array_insert)(ivr_array *p_self, const ivr_int p_pos, const ivr_variant *p_value);
	void (*ivr_array_invert)(ivr_array *p_self);
	ivr_variant (*ivr_array_pop_back)(ivr_array *p_self);
	ivr_variant (*ivr_array_pop_front)(ivr_array *p_self);
	void (*ivr_array_push_back)(ivr_array *p_self, const ivr_variant *p_value);
	void (*ivr_array_push_front)(ivr_array *p_self, const ivr_variant *p_value);
	void (*ivr_array_remove)(ivr_array *p_self, const ivr_int p_idx);
	void (*ivr_array_resize)(ivr_array *p_self, const ivr_int p_size);
	ivr_int (*ivr_array_rfind)(const ivr_array *p_self, const ivr_variant *p_what, const ivr_int p_from);
	ivr_int (*ivr_array_size)(const ivr_array *p_self);
	void (*ivr_array_sort)(ivr_array *p_self);
	void (*ivr_array_sort_custom)(ivr_array *p_self, ivr_object *p_obj, const ivr_string *p_func);
	ivr_int (*ivr_array_bsearch)(ivr_array *p_self, const ivr_variant *p_value, const ivr_bool p_before);
	ivr_int (*ivr_array_bsearch_custom)(ivr_array *p_self, const ivr_variant *p_value, ivr_object *p_obj, const ivr_string *p_func, const ivr_bool p_before);
	void (*ivr_array_destroy)(ivr_array *p_self);
	void (*ivr_dictionary_new)(ivr_dictionary *r_dest);
	void (*ivr_dictionary_new_copy)(ivr_dictionary *r_dest, const ivr_dictionary *p_src);
	void (*ivr_dictionary_destroy)(ivr_dictionary *p_self);
	ivr_int (*ivr_dictionary_size)(const ivr_dictionary *p_self);
	ivr_bool (*ivr_dictionary_empty)(const ivr_dictionary *p_self);
	void (*ivr_dictionary_clear)(ivr_dictionary *p_self);
	ivr_bool (*ivr_dictionary_has)(const ivr_dictionary *p_self, const ivr_variant *p_key);
	ivr_bool (*ivr_dictionary_has_all)(const ivr_dictionary *p_self, const ivr_array *p_keys);
	void (*ivr_dictionary_erase)(ivr_dictionary *p_self, const ivr_variant *p_key);
	ivr_int (*ivr_dictionary_hash)(const ivr_dictionary *p_self);
	ivr_array (*ivr_dictionary_keys)(const ivr_dictionary *p_self);
	ivr_array (*ivr_dictionary_values)(const ivr_dictionary *p_self);
	ivr_variant (*ivr_dictionary_get)(const ivr_dictionary *p_self, const ivr_variant *p_key);
	void (*ivr_dictionary_set)(ivr_dictionary *p_self, const ivr_variant *p_key, const ivr_variant *p_value);
	ivr_variant *(*ivr_dictionary_operator_index)(ivr_dictionary *p_self, const ivr_variant *p_key);
	const ivr_variant *(*ivr_dictionary_operator_index_const)(const ivr_dictionary *p_self, const ivr_variant *p_key);
	ivr_variant *(*ivr_dictionary_next)(const ivr_dictionary *p_self, const ivr_variant *p_key);
	ivr_bool (*ivr_dictionary_operator_equal)(const ivr_dictionary *p_self, const ivr_dictionary *p_b);
	ivr_string (*ivr_dictionary_to_json)(const ivr_dictionary *p_self);
	void (*ivr_node_path_new)(ivr_node_path *r_dest, const ivr_string *p_from);
	void (*ivr_node_path_new_copy)(ivr_node_path *r_dest, const ivr_node_path *p_src);
	void (*ivr_node_path_destroy)(ivr_node_path *p_self);
	ivr_string (*ivr_node_path_as_string)(const ivr_node_path *p_self);
	ivr_bool (*ivr_node_path_is_absolute)(const ivr_node_path *p_self);
	ivr_int (*ivr_node_path_get_name_count)(const ivr_node_path *p_self);
	ivr_string (*ivr_node_path_get_name)(const ivr_node_path *p_self, const ivr_int p_idx);
	ivr_int (*ivr_node_path_get_subname_count)(const ivr_node_path *p_self);
	ivr_string (*ivr_node_path_get_subname)(const ivr_node_path *p_self, const ivr_int p_idx);
	ivr_string (*ivr_node_path_get_concatenated_subnames)(const ivr_node_path *p_self);
	ivr_bool (*ivr_node_path_is_empty)(const ivr_node_path *p_self);
	ivr_bool (*ivr_node_path_operator_equal)(const ivr_node_path *p_self, const ivr_node_path *p_b);
	void (*ivr_plane_new_with_reals)(ivr_plane *r_dest, const ivr_real p_a, const ivr_real p_b, const ivr_real p_c, const ivr_real p_d);
	void (*ivr_plane_new_with_vectors)(ivr_plane *r_dest, const ivr_vector3 *p_v1, const ivr_vector3 *p_v2, const ivr_vector3 *p_v3);
	void (*ivr_plane_new_with_normal)(ivr_plane *r_dest, const ivr_vector3 *p_normal, const ivr_real p_d);
	ivr_string (*ivr_plane_as_string)(const ivr_plane *p_self);
	ivr_plane (*ivr_plane_normalized)(const ivr_plane *p_self);
	ivr_vector3 (*ivr_plane_center)(const ivr_plane *p_self);
	ivr_vector3 (*ivr_plane_get_any_point)(const ivr_plane *p_self);
	ivr_bool (*ivr_plane_is_point_over)(const ivr_plane *p_self, const ivr_vector3 *p_point);
	ivr_real (*ivr_plane_distance_to)(const ivr_plane *p_self, const ivr_vector3 *p_point);
	ivr_bool (*ivr_plane_has_point)(const ivr_plane *p_self, const ivr_vector3 *p_point, const ivr_real p_epsilon);
	ivr_vector3 (*ivr_plane_project)(const ivr_plane *p_self, const ivr_vector3 *p_point);
	ivr_bool (*ivr_plane_intersect_3)(const ivr_plane *p_self, ivr_vector3 *r_dest, const ivr_plane *p_b, const ivr_plane *p_c);
	ivr_bool (*ivr_plane_intersects_ray)(const ivr_plane *p_self, ivr_vector3 *r_dest, const ivr_vector3 *p_from, const ivr_vector3 *p_dir);
	ivr_bool (*ivr_plane_intersects_segment)(const ivr_plane *p_self, ivr_vector3 *r_dest, const ivr_vector3 *p_begin, const ivr_vector3 *p_end);
	ivr_plane (*ivr_plane_operator_neg)(const ivr_plane *p_self);
	ivr_bool (*ivr_plane_operator_equal)(const ivr_plane *p_self, const ivr_plane *p_b);
	void (*ivr_plane_set_normal)(ivr_plane *p_self, const ivr_vector3 *p_normal);
	ivr_vector3 (*ivr_plane_get_normal)(const ivr_plane *p_self);
	ivr_real (*ivr_plane_get_d)(const ivr_plane *p_self);
	void (*ivr_plane_set_d)(ivr_plane *p_self, const ivr_real p_d);
	void (*ivr_rect2_new_with_position_and_size)(ivr_rect2 *r_dest, const ivr_vector2 *p_pos, const ivr_vector2 *p_size);
	void (*ivr_rect2_new)(ivr_rect2 *r_dest, const ivr_real p_x, const ivr_real p_y, const ivr_real p_width, const ivr_real p_height);
	ivr_string (*ivr_rect2_as_string)(const ivr_rect2 *p_self);
	ivr_real (*ivr_rect2_get_area)(const ivr_rect2 *p_self);
	ivr_bool (*ivr_rect2_intersects)(const ivr_rect2 *p_self, const ivr_rect2 *p_b);
	ivr_bool (*ivr_rect2_encloses)(const ivr_rect2 *p_self, const ivr_rect2 *p_b);
	ivr_bool (*ivr_rect2_has_no_area)(const ivr_rect2 *p_self);
	ivr_rect2 (*ivr_rect2_clip)(const ivr_rect2 *p_self, const ivr_rect2 *p_b);
	ivr_rect2 (*ivr_rect2_merge)(const ivr_rect2 *p_self, const ivr_rect2 *p_b);
	ivr_bool (*ivr_rect2_has_point)(const ivr_rect2 *p_self, const ivr_vector2 *p_point);
	ivr_rect2 (*ivr_rect2_grow)(const ivr_rect2 *p_self, const ivr_real p_by);
	ivr_rect2 (*ivr_rect2_expand)(const ivr_rect2 *p_self, const ivr_vector2 *p_to);
	ivr_bool (*ivr_rect2_operator_equal)(const ivr_rect2 *p_self, const ivr_rect2 *p_b);
	ivr_vector2 (*ivr_rect2_get_position)(const ivr_rect2 *p_self);
	ivr_vector2 (*ivr_rect2_get_size)(const ivr_rect2 *p_self);
	void (*ivr_rect2_set_position)(ivr_rect2 *p_self, const ivr_vector2 *p_pos);
	void (*ivr_rect2_set_size)(ivr_rect2 *p_self, const ivr_vector2 *p_size);
	void (*ivr_aabb_new)(ivr_aabb *r_dest, const ivr_vector3 *p_pos, const ivr_vector3 *p_size);
	ivr_vector3 (*ivr_aabb_get_position)(const ivr_aabb *p_self);
	void (*ivr_aabb_set_position)(const ivr_aabb *p_self, const ivr_vector3 *p_v);
	ivr_vector3 (*ivr_aabb_get_size)(const ivr_aabb *p_self);
	void (*ivr_aabb_set_size)(const ivr_aabb *p_self, const ivr_vector3 *p_v);
	ivr_string (*ivr_aabb_as_string)(const ivr_aabb *p_self);
	ivr_real (*ivr_aabb_get_area)(const ivr_aabb *p_self);
	ivr_bool (*ivr_aabb_has_no_area)(const ivr_aabb *p_self);
	ivr_bool (*ivr_aabb_has_no_surface)(const ivr_aabb *p_self);
	ivr_bool (*ivr_aabb_intersects)(const ivr_aabb *p_self, const ivr_aabb *p_with);
	ivr_bool (*ivr_aabb_encloses)(const ivr_aabb *p_self, const ivr_aabb *p_with);
	ivr_aabb (*ivr_aabb_merge)(const ivr_aabb *p_self, const ivr_aabb *p_with);
	ivr_aabb (*ivr_aabb_intersection)(const ivr_aabb *p_self, const ivr_aabb *p_with);
	ivr_bool (*ivr_aabb_intersects_plane)(const ivr_aabb *p_self, const ivr_plane *p_plane);
	ivr_bool (*ivr_aabb_intersects_segment)(const ivr_aabb *p_self, const ivr_vector3 *p_from, const ivr_vector3 *p_to);
	ivr_bool (*ivr_aabb_has_point)(const ivr_aabb *p_self, const ivr_vector3 *p_point);
	ivr_vector3 (*ivr_aabb_get_support)(const ivr_aabb *p_self, const ivr_vector3 *p_dir);
	ivr_vector3 (*ivr_aabb_get_longest_axis)(const ivr_aabb *p_self);
	ivr_int (*ivr_aabb_get_longest_axis_index)(const ivr_aabb *p_self);
	ivr_real (*ivr_aabb_get_longest_axis_size)(const ivr_aabb *p_self);
	ivr_vector3 (*ivr_aabb_get_shortest_axis)(const ivr_aabb *p_self);
	ivr_int (*ivr_aabb_get_shortest_axis_index)(const ivr_aabb *p_self);
	ivr_real (*ivr_aabb_get_shortest_axis_size)(const ivr_aabb *p_self);
	ivr_aabb (*ivr_aabb_expand)(const ivr_aabb *p_self, const ivr_vector3 *p_to_point);
	ivr_aabb (*ivr_aabb_grow)(const ivr_aabb *p_self, const ivr_real p_by);
	ivr_vector3 (*ivr_aabb_get_endpoint)(const ivr_aabb *p_self, const ivr_int p_idx);
	ivr_bool (*ivr_aabb_operator_equal)(const ivr_aabb *p_self, const ivr_aabb *p_b);
	void (*ivr_rid_new)(ivr_rid *r_dest);
	ivr_int (*ivr_rid_get_id)(const ivr_rid *p_self);
	void (*ivr_rid_new_with_resource)(ivr_rid *r_dest, const ivr_object *p_from);
	ivr_bool (*ivr_rid_operator_equal)(const ivr_rid *p_self, const ivr_rid *p_b);
	ivr_bool (*ivr_rid_operator_less)(const ivr_rid *p_self, const ivr_rid *p_b);
	void (*ivr_transform_new_with_axis_origin)(ivr_transform *r_dest, const ivr_vector3 *p_x_axis, const ivr_vector3 *p_y_axis, const ivr_vector3 *p_z_axis, const ivr_vector3 *p_origin);
	void (*ivr_transform_new)(ivr_transform *r_dest, const ivr_basis *p_basis, const ivr_vector3 *p_origin);
	ivr_basis (*ivr_transform_get_basis)(const ivr_transform *p_self);
	void (*ivr_transform_set_basis)(ivr_transform *p_self, const ivr_basis *p_v);
	ivr_vector3 (*ivr_transform_get_origin)(const ivr_transform *p_self);
	void (*ivr_transform_set_origin)(ivr_transform *p_self, const ivr_vector3 *p_v);
	ivr_string (*ivr_transform_as_string)(const ivr_transform *p_self);
	ivr_transform (*ivr_transform_inverse)(const ivr_transform *p_self);
	ivr_transform (*ivr_transform_affine_inverse)(const ivr_transform *p_self);
	ivr_transform (*ivr_transform_orthonormalized)(const ivr_transform *p_self);
	ivr_transform (*ivr_transform_rotated)(const ivr_transform *p_self, const ivr_vector3 *p_axis, const ivr_real p_phi);
	ivr_transform (*ivr_transform_scaled)(const ivr_transform *p_self, const ivr_vector3 *p_scale);
	ivr_transform (*ivr_transform_translated)(const ivr_transform *p_self, const ivr_vector3 *p_ofs);
	ivr_transform (*ivr_transform_looking_at)(const ivr_transform *p_self, const ivr_vector3 *p_target, const ivr_vector3 *p_up);
	ivr_plane (*ivr_transform_xform_plane)(const ivr_transform *p_self, const ivr_plane *p_v);
	ivr_plane (*ivr_transform_xform_inv_plane)(const ivr_transform *p_self, const ivr_plane *p_v);
	void (*ivr_transform_new_identity)(ivr_transform *r_dest);
	ivr_bool (*ivr_transform_operator_equal)(const ivr_transform *p_self, const ivr_transform *p_b);
	ivr_transform (*ivr_transform_operator_multiply)(const ivr_transform *p_self, const ivr_transform *p_b);
	ivr_vector3 (*ivr_transform_xform_vector3)(const ivr_transform *p_self, const ivr_vector3 *p_v);
	ivr_vector3 (*ivr_transform_xform_inv_vector3)(const ivr_transform *p_self, const ivr_vector3 *p_v);
	ivr_aabb (*ivr_transform_xform_aabb)(const ivr_transform *p_self, const ivr_aabb *p_v);
	ivr_aabb (*ivr_transform_xform_inv_aabb)(const ivr_transform *p_self, const ivr_aabb *p_v);
	void (*ivr_transform2d_new)(ivr_transform2d *r_dest, const ivr_real p_rot, const ivr_vector2 *p_pos);
	void (*ivr_transform2d_new_axis_origin)(ivr_transform2d *r_dest, const ivr_vector2 *p_x_axis, const ivr_vector2 *p_y_axis, const ivr_vector2 *p_origin);
	ivr_string (*ivr_transform2d_as_string)(const ivr_transform2d *p_self);
	ivr_transform2d (*ivr_transform2d_inverse)(const ivr_transform2d *p_self);
	ivr_transform2d (*ivr_transform2d_affine_inverse)(const ivr_transform2d *p_self);
	ivr_real (*ivr_transform2d_get_rotation)(const ivr_transform2d *p_self);
	ivr_vector2 (*ivr_transform2d_get_origin)(const ivr_transform2d *p_self);
	ivr_vector2 (*ivr_transform2d_get_scale)(const ivr_transform2d *p_self);
	ivr_transform2d (*ivr_transform2d_orthonormalized)(const ivr_transform2d *p_self);
	ivr_transform2d (*ivr_transform2d_rotated)(const ivr_transform2d *p_self, const ivr_real p_phi);
	ivr_transform2d (*ivr_transform2d_scaled)(const ivr_transform2d *p_self, const ivr_vector2 *p_scale);
	ivr_transform2d (*ivr_transform2d_translated)(const ivr_transform2d *p_self, const ivr_vector2 *p_offset);
	ivr_vector2 (*ivr_transform2d_xform_vector2)(const ivr_transform2d *p_self, const ivr_vector2 *p_v);
	ivr_vector2 (*ivr_transform2d_xform_inv_vector2)(const ivr_transform2d *p_self, const ivr_vector2 *p_v);
	ivr_vector2 (*ivr_transform2d_basis_xform_vector2)(const ivr_transform2d *p_self, const ivr_vector2 *p_v);
	ivr_vector2 (*ivr_transform2d_basis_xform_inv_vector2)(const ivr_transform2d *p_self, const ivr_vector2 *p_v);
	ivr_transform2d (*ivr_transform2d_interpolate_with)(const ivr_transform2d *p_self, const ivr_transform2d *p_m, const ivr_real p_c);
	ivr_bool (*ivr_transform2d_operator_equal)(const ivr_transform2d *p_self, const ivr_transform2d *p_b);
	ivr_transform2d (*ivr_transform2d_operator_multiply)(const ivr_transform2d *p_self, const ivr_transform2d *p_b);
	void (*ivr_transform2d_new_identity)(ivr_transform2d *r_dest);
	ivr_rect2 (*ivr_transform2d_xform_rect2)(const ivr_transform2d *p_self, const ivr_rect2 *p_v);
	ivr_rect2 (*ivr_transform2d_xform_inv_rect2)(const ivr_transform2d *p_self, const ivr_rect2 *p_v);
	ivr_variant_type (*ivr_variant_get_type)(const ivr_variant *p_v);
	void (*ivr_variant_new_copy)(ivr_variant *r_dest, const ivr_variant *p_src);
	void (*ivr_variant_new_nil)(ivr_variant *r_dest);
	void (*ivr_variant_new_bool)(ivr_variant *r_dest, const ivr_bool p_b);
	void (*ivr_variant_new_uint)(ivr_variant *r_dest, const uint64_t p_i);
	void (*ivr_variant_new_int)(ivr_variant *r_dest, const int64_t p_i);
	void (*ivr_variant_new_real)(ivr_variant *r_dest, const double p_r);
	void (*ivr_variant_new_string)(ivr_variant *r_dest, const ivr_string *p_s);
	void (*ivr_variant_new_vector2)(ivr_variant *r_dest, const ivr_vector2 *p_v2);
	void (*ivr_variant_new_rect2)(ivr_variant *r_dest, const ivr_rect2 *p_rect2);
	void (*ivr_variant_new_vector3)(ivr_variant *r_dest, const ivr_vector3 *p_v3);
	void (*ivr_variant_new_transform2d)(ivr_variant *r_dest, const ivr_transform2d *p_t2d);
	void (*ivr_variant_new_plane)(ivr_variant *r_dest, const ivr_plane *p_plane);
	void (*ivr_variant_new_quat)(ivr_variant *r_dest, const ivr_quat *p_quat);
	void (*ivr_variant_new_aabb)(ivr_variant *r_dest, const ivr_aabb *p_aabb);
	void (*ivr_variant_new_basis)(ivr_variant *r_dest, const ivr_basis *p_basis);
	void (*ivr_variant_new_transform)(ivr_variant *r_dest, const ivr_transform *p_trans);
	void (*ivr_variant_new_color)(ivr_variant *r_dest, const ivr_color *p_color);
	void (*ivr_variant_new_node_path)(ivr_variant *r_dest, const ivr_node_path *p_np);
	void (*ivr_variant_new_rid)(ivr_variant *r_dest, const ivr_rid *p_rid);
	void (*ivr_variant_new_object)(ivr_variant *r_dest, const ivr_object *p_obj);
	void (*ivr_variant_new_dictionary)(ivr_variant *r_dest, const ivr_dictionary *p_dict);
	void (*ivr_variant_new_array)(ivr_variant *r_dest, const ivr_array *p_arr);
	void (*ivr_variant_new_pool_byte_array)(ivr_variant *r_dest, const ivr_pool_byte_array *p_pba);
	void (*ivr_variant_new_pool_int_array)(ivr_variant *r_dest, const ivr_pool_int_array *p_pia);
	void (*ivr_variant_new_pool_real_array)(ivr_variant *r_dest, const ivr_pool_real_array *p_pra);
	void (*ivr_variant_new_pool_string_array)(ivr_variant *r_dest, const ivr_pool_string_array *p_psa);
	void (*ivr_variant_new_pool_vector2_array)(ivr_variant *r_dest, const ivr_pool_vector2_array *p_pv2a);
	void (*ivr_variant_new_pool_vector3_array)(ivr_variant *r_dest, const ivr_pool_vector3_array *p_pv3a);
	void (*ivr_variant_new_pool_color_array)(ivr_variant *r_dest, const ivr_pool_color_array *p_pca);
	ivr_bool (*ivr_variant_as_bool)(const ivr_variant *p_self);
	uint64_t (*ivr_variant_as_uint)(const ivr_variant *p_self);
	int64_t (*ivr_variant_as_int)(const ivr_variant *p_self);
	double (*ivr_variant_as_real)(const ivr_variant *p_self);
	ivr_string (*ivr_variant_as_string)(const ivr_variant *p_self);
	ivr_vector2 (*ivr_variant_as_vector2)(const ivr_variant *p_self);
	ivr_rect2 (*ivr_variant_as_rect2)(const ivr_variant *p_self);
	ivr_vector3 (*ivr_variant_as_vector3)(const ivr_variant *p_self);
	ivr_transform2d (*ivr_variant_as_transform2d)(const ivr_variant *p_self);
	ivr_plane (*ivr_variant_as_plane)(const ivr_variant *p_self);
	ivr_quat (*ivr_variant_as_quat)(const ivr_variant *p_self);
	ivr_aabb (*ivr_variant_as_aabb)(const ivr_variant *p_self);
	ivr_basis (*ivr_variant_as_basis)(const ivr_variant *p_self);
	ivr_transform (*ivr_variant_as_transform)(const ivr_variant *p_self);
	ivr_color (*ivr_variant_as_color)(const ivr_variant *p_self);
	ivr_node_path (*ivr_variant_as_node_path)(const ivr_variant *p_self);
	ivr_rid (*ivr_variant_as_rid)(const ivr_variant *p_self);
	ivr_object *(*ivr_variant_as_object)(const ivr_variant *p_self);
	ivr_dictionary (*ivr_variant_as_dictionary)(const ivr_variant *p_self);
	ivr_array (*ivr_variant_as_array)(const ivr_variant *p_self);
	ivr_pool_byte_array (*ivr_variant_as_pool_byte_array)(const ivr_variant *p_self);
	ivr_pool_int_array (*ivr_variant_as_pool_int_array)(const ivr_variant *p_self);
	ivr_pool_real_array (*ivr_variant_as_pool_real_array)(const ivr_variant *p_self);
	ivr_pool_string_array (*ivr_variant_as_pool_string_array)(const ivr_variant *p_self);
	ivr_pool_vector2_array (*ivr_variant_as_pool_vector2_array)(const ivr_variant *p_self);
	ivr_pool_vector3_array (*ivr_variant_as_pool_vector3_array)(const ivr_variant *p_self);
	ivr_pool_color_array (*ivr_variant_as_pool_color_array)(const ivr_variant *p_self);
	ivr_variant (*ivr_variant_call)(ivr_variant *p_self, const ivr_string *p_method, const ivr_variant **p_args, const ivr_int p_argcount, ivr_variant_call_error *r_error);
	ivr_bool (*ivr_variant_has_method)(const ivr_variant *p_self, const ivr_string *p_method);
	ivr_bool (*ivr_variant_operator_equal)(const ivr_variant *p_self, const ivr_variant *p_other);
	ivr_bool (*ivr_variant_operator_less)(const ivr_variant *p_self, const ivr_variant *p_other);
	ivr_bool (*ivr_variant_hash_compare)(const ivr_variant *p_self, const ivr_variant *p_other);
	ivr_bool (*ivr_variant_booleanize)(const ivr_variant *p_self);
	void (*ivr_variant_destroy)(ivr_variant *p_self);
	ivr_int (*ivr_char_string_length)(const ivr_char_string *p_cs);
	const char *(*ivr_char_string_get_data)(const ivr_char_string *p_cs);
	void (*ivr_char_string_destroy)(ivr_char_string *p_cs);
	void (*ivr_string_new)(ivr_string *r_dest);
	void (*ivr_string_new_copy)(ivr_string *r_dest, const ivr_string *p_src);
	void (*ivr_string_new_with_wide_string)(ivr_string *r_dest, const wchar_t *p_contents, const int p_size);
	const wchar_t *(*ivr_string_operator_index)(ivr_string *p_self, const ivr_int p_idx);
	wchar_t (*ivr_string_operator_index_const)(const ivr_string *p_self, const ivr_int p_idx);
	const wchar_t *(*ivr_string_wide_str)(const ivr_string *p_self);
	ivr_bool (*ivr_string_operator_equal)(const ivr_string *p_self, const ivr_string *p_b);
	ivr_bool (*ivr_string_operator_less)(const ivr_string *p_self, const ivr_string *p_b);
	ivr_string (*ivr_string_operator_plus)(const ivr_string *p_self, const ivr_string *p_b);
	ivr_int (*ivr_string_length)(const ivr_string *p_self);
	signed char (*ivr_string_casecmp_to)(const ivr_string *p_self, const ivr_string *p_str);
	signed char (*ivr_string_nocasecmp_to)(const ivr_string *p_self, const ivr_string *p_str);
	signed char (*ivr_string_naturalnocasecmp_to)(const ivr_string *p_self, const ivr_string *p_str);
	ivr_bool (*ivr_string_begins_with)(const ivr_string *p_self, const ivr_string *p_string);
	ivr_bool (*ivr_string_begins_with_char_array)(const ivr_string *p_self, const char *p_char_array);
	ivr_array (*ivr_string_bigrams)(const ivr_string *p_self);
	ivr_string (*ivr_string_chr)(wchar_t p_character);
	ivr_bool (*ivr_string_ends_with)(const ivr_string *p_self, const ivr_string *p_string);
	ivr_int (*ivr_string_find)(const ivr_string *p_self, ivr_string p_what);
	ivr_int (*ivr_string_find_from)(const ivr_string *p_self, ivr_string p_what, ivr_int p_from);
	ivr_int (*ivr_string_findmk)(const ivr_string *p_self, const ivr_array *p_keys);
	ivr_int (*ivr_string_findmk_from)(const ivr_string *p_self, const ivr_array *p_keys, ivr_int p_from);
	ivr_int (*ivr_string_findmk_from_in_place)(const ivr_string *p_self, const ivr_array *p_keys, ivr_int p_from, ivr_int *r_key);
	ivr_int (*ivr_string_findn)(const ivr_string *p_self, ivr_string p_what);
	ivr_int (*ivr_string_findn_from)(const ivr_string *p_self, ivr_string p_what, ivr_int p_from);
	ivr_int (*ivr_string_find_last)(const ivr_string *p_self, ivr_string p_what);
	ivr_string (*ivr_string_format)(const ivr_string *p_self, const ivr_variant *p_values);
	ivr_string (*ivr_string_format_with_custom_placeholder)(const ivr_string *p_self, const ivr_variant *p_values, const char *p_placeholder);
	ivr_string (*ivr_string_hex_encode_buffer)(const uint8_t *p_buffer, ivr_int p_len);
	ivr_int (*ivr_string_hex_to_int)(const ivr_string *p_self);
	ivr_int (*ivr_string_hex_to_int_without_prefix)(const ivr_string *p_self);
	ivr_string (*ivr_string_insert)(const ivr_string *p_self, ivr_int p_at_pos, ivr_string p_string);
	ivr_bool (*ivr_string_is_numeric)(const ivr_string *p_self);
	ivr_bool (*ivr_string_is_subsequence_of)(const ivr_string *p_self, const ivr_string *p_string);
	ivr_bool (*ivr_string_is_subsequence_ofi)(const ivr_string *p_self, const ivr_string *p_string);
	ivr_string (*ivr_string_lpad)(const ivr_string *p_self, ivr_int p_min_length);
	ivr_string (*ivr_string_lpad_with_custom_character)(const ivr_string *p_self, ivr_int p_min_length, const ivr_string *p_character);
	ivr_bool (*ivr_string_match)(const ivr_string *p_self, const ivr_string *p_wildcard);
	ivr_bool (*ivr_string_matchn)(const ivr_string *p_self, const ivr_string *p_wildcard);
	ivr_string (*ivr_string_md5)(const uint8_t *p_md5);
	ivr_string (*ivr_string_num)(double p_num);
	ivr_string (*ivr_string_num_int64)(int64_t p_num, ivr_int p_base);
	ivr_string (*ivr_string_num_int64_capitalized)(int64_t p_num, ivr_int p_base, ivr_bool p_capitalize_hex);
	ivr_string (*ivr_string_num_real)(double p_num);
	ivr_string (*ivr_string_num_scientific)(double p_num);
	ivr_string (*ivr_string_num_with_decimals)(double p_num, ivr_int p_decimals);
	ivr_string (*ivr_string_pad_decimals)(const ivr_string *p_self, ivr_int p_digits);
	ivr_string (*ivr_string_pad_zeros)(const ivr_string *p_self, ivr_int p_digits);
	ivr_string (*ivr_string_replace_first)(const ivr_string *p_self, ivr_string p_key, ivr_string p_with);
	ivr_string (*ivr_string_replace)(const ivr_string *p_self, ivr_string p_key, ivr_string p_with);
	ivr_string (*ivr_string_replacen)(const ivr_string *p_self, ivr_string p_key, ivr_string p_with);
	ivr_int (*ivr_string_rfind)(const ivr_string *p_self, ivr_string p_what);
	ivr_int (*ivr_string_rfindn)(const ivr_string *p_self, ivr_string p_what);
	ivr_int (*ivr_string_rfind_from)(const ivr_string *p_self, ivr_string p_what, ivr_int p_from);
	ivr_int (*ivr_string_rfindn_from)(const ivr_string *p_self, ivr_string p_what, ivr_int p_from);
	ivr_string (*ivr_string_rpad)(const ivr_string *p_self, ivr_int p_min_length);
	ivr_string (*ivr_string_rpad_with_custom_character)(const ivr_string *p_self, ivr_int p_min_length, const ivr_string *p_character);
	ivr_real (*ivr_string_similarity)(const ivr_string *p_self, const ivr_string *p_string);
	ivr_string (*ivr_string_sprintf)(const ivr_string *p_self, const ivr_array *p_values, ivr_bool *p_error);
	ivr_string (*ivr_string_substr)(const ivr_string *p_self, ivr_int p_from, ivr_int p_chars);
	double (*ivr_string_to_double)(const ivr_string *p_self);
	ivr_real (*ivr_string_to_float)(const ivr_string *p_self);
	ivr_int (*ivr_string_to_int)(const ivr_string *p_self);
	ivr_string (*ivr_string_camelcase_to_underscore)(const ivr_string *p_self);
	ivr_string (*ivr_string_camelcase_to_underscore_lowercased)(const ivr_string *p_self);
	ivr_string (*ivr_string_capitalize)(const ivr_string *p_self);
	double (*ivr_string_char_to_double)(const char *p_what);
	ivr_int (*ivr_string_char_to_int)(const char *p_what);
	int64_t (*ivr_string_wchar_to_int)(const wchar_t *p_str);
	ivr_int (*ivr_string_char_to_int_with_len)(const char *p_what, ivr_int p_len);
	int64_t (*ivr_string_char_to_int64_with_len)(const wchar_t *p_str, int p_len);
	int64_t (*ivr_string_hex_to_int64)(const ivr_string *p_self);
	int64_t (*ivr_string_hex_to_int64_with_prefix)(const ivr_string *p_self);
	int64_t (*ivr_string_to_int64)(const ivr_string *p_self);
	double (*ivr_string_unicode_char_to_double)(const wchar_t *p_str, const wchar_t **r_end);
	ivr_int (*ivr_string_get_slice_count)(const ivr_string *p_self, ivr_string p_splitter);
	ivr_string (*ivr_string_get_slice)(const ivr_string *p_self, ivr_string p_splitter, ivr_int p_slice);
	ivr_string (*ivr_string_get_slicec)(const ivr_string *p_self, wchar_t p_splitter, ivr_int p_slice);
	ivr_array (*ivr_string_split)(const ivr_string *p_self, const ivr_string *p_splitter);
	ivr_array (*ivr_string_split_allow_empty)(const ivr_string *p_self, const ivr_string *p_splitter);
	ivr_array (*ivr_string_split_floats)(const ivr_string *p_self, const ivr_string *p_splitter);
	ivr_array (*ivr_string_split_floats_allows_empty)(const ivr_string *p_self, const ivr_string *p_splitter);
	ivr_array (*ivr_string_split_floats_mk)(const ivr_string *p_self, const ivr_array *p_splitters);
	ivr_array (*ivr_string_split_floats_mk_allows_empty)(const ivr_string *p_self, const ivr_array *p_splitters);
	ivr_array (*ivr_string_split_ints)(const ivr_string *p_self, const ivr_string *p_splitter);
	ivr_array (*ivr_string_split_ints_allows_empty)(const ivr_string *p_self, const ivr_string *p_splitter);
	ivr_array (*ivr_string_split_ints_mk)(const ivr_string *p_self, const ivr_array *p_splitters);
	ivr_array (*ivr_string_split_ints_mk_allows_empty)(const ivr_string *p_self, const ivr_array *p_splitters);
	ivr_array (*ivr_string_split_spaces)(const ivr_string *p_self);
	wchar_t (*ivr_string_char_lowercase)(wchar_t p_char);
	wchar_t (*ivr_string_char_uppercase)(wchar_t p_char);
	ivr_string (*ivr_string_to_lower)(const ivr_string *p_self);
	ivr_string (*ivr_string_to_upper)(const ivr_string *p_self);
	ivr_string (*ivr_string_get_basename)(const ivr_string *p_self);
	ivr_string (*ivr_string_get_extension)(const ivr_string *p_self);
	ivr_string (*ivr_string_left)(const ivr_string *p_self, ivr_int p_pos);
	wchar_t (*ivr_string_ord_at)(const ivr_string *p_self, ivr_int p_idx);
	ivr_string (*ivr_string_plus_file)(const ivr_string *p_self, const ivr_string *p_file);
	ivr_string (*ivr_string_right)(const ivr_string *p_self, ivr_int p_pos);
	ivr_string (*ivr_string_strip_edges)(const ivr_string *p_self, ivr_bool p_left, ivr_bool p_right);
	ivr_string (*ivr_string_strip_escapes)(const ivr_string *p_self);
	void (*ivr_string_erase)(ivr_string *p_self, ivr_int p_pos, ivr_int p_chars);
	ivr_char_string (*ivr_string_ascii)(const ivr_string *p_self);
	ivr_char_string (*ivr_string_ascii_extended)(const ivr_string *p_self);
	ivr_char_string (*ivr_string_utf8)(const ivr_string *p_self);
	ivr_bool (*ivr_string_parse_utf8)(ivr_string *p_self, const char *p_utf8);
	ivr_bool (*ivr_string_parse_utf8_with_len)(ivr_string *p_self, const char *p_utf8, ivr_int p_len);
	ivr_string (*ivr_string_chars_to_utf8)(const char *p_utf8);
	ivr_string (*ivr_string_chars_to_utf8_with_len)(const char *p_utf8, ivr_int p_len);
	uint32_t (*ivr_string_hash)(const ivr_string *p_self);
	uint64_t (*ivr_string_hash64)(const ivr_string *p_self);
	uint32_t (*ivr_string_hash_chars)(const char *p_cstr);
	uint32_t (*ivr_string_hash_chars_with_len)(const char *p_cstr, ivr_int p_len);
	uint32_t (*ivr_string_hash_utf8_chars)(const wchar_t *p_str);
	uint32_t (*ivr_string_hash_utf8_chars_with_len)(const wchar_t *p_str, ivr_int p_len);
	ivr_pool_byte_array (*ivr_string_md5_buffer)(const ivr_string *p_self);
	ivr_string (*ivr_string_md5_text)(const ivr_string *p_self);
	ivr_pool_byte_array (*ivr_string_sha256_buffer)(const ivr_string *p_self);
	ivr_string (*ivr_string_sha256_text)(const ivr_string *p_self);
	ivr_bool (*ivr_string_empty)(const ivr_string *p_self);
	ivr_string (*ivr_string_get_base_dir)(const ivr_string *p_self);
	ivr_string (*ivr_string_get_file)(const ivr_string *p_self);
	ivr_string (*ivr_string_humanize_size)(uint64_t p_size);
	ivr_bool (*ivr_string_is_abs_path)(const ivr_string *p_self);
	ivr_bool (*ivr_string_is_rel_path)(const ivr_string *p_self);
	ivr_bool (*ivr_string_is_resource_file)(const ivr_string *p_self);
	ivr_string (*ivr_string_path_to)(const ivr_string *p_self, const ivr_string *p_path);
	ivr_string (*ivr_string_path_to_file)(const ivr_string *p_self, const ivr_string *p_path);
	ivr_string (*ivr_string_simplify_path)(const ivr_string *p_self);
	ivr_string (*ivr_string_c_escape)(const ivr_string *p_self);
	ivr_string (*ivr_string_c_escape_multiline)(const ivr_string *p_self);
	ivr_string (*ivr_string_c_unescape)(const ivr_string *p_self);
	ivr_string (*ivr_string_http_escape)(const ivr_string *p_self);
	ivr_string (*ivr_string_http_unescape)(const ivr_string *p_self);
	ivr_string (*ivr_string_json_escape)(const ivr_string *p_self);
	ivr_string (*ivr_string_word_wrap)(const ivr_string *p_self, ivr_int p_chars_per_line);
	ivr_string (*ivr_string_xml_escape)(const ivr_string *p_self);
	ivr_string (*ivr_string_xml_escape_with_quotes)(const ivr_string *p_self);
	ivr_string (*ivr_string_xml_unescape)(const ivr_string *p_self);
	ivr_string (*ivr_string_percent_decode)(const ivr_string *p_self);
	ivr_string (*ivr_string_percent_encode)(const ivr_string *p_self);
	ivr_bool (*ivr_string_is_valid_float)(const ivr_string *p_self);
	ivr_bool (*ivr_string_is_valid_hex_number)(const ivr_string *p_self, ivr_bool p_with_prefix);
	ivr_bool (*ivr_string_is_valid_html_color)(const ivr_string *p_self);
	ivr_bool (*ivr_string_is_valid_identifier)(const ivr_string *p_self);
	ivr_bool (*ivr_string_is_valid_integer)(const ivr_string *p_self);
	ivr_bool (*ivr_string_is_valid_ip_address)(const ivr_string *p_self);
	void (*ivr_string_destroy)(ivr_string *p_self);
	void (*ivr_string_name_new)(ivr_string_name *r_dest, const ivr_string *p_name);
	void (*ivr_string_name_new_data)(ivr_string_name *r_dest, const char *p_name);
	ivr_string (*ivr_string_name_get_name)(const ivr_string_name *p_self);
	uint32_t (*ivr_string_name_get_hash)(const ivr_string_name *p_self);
	const void *(*ivr_string_name_get_data_unique_pointer)(const ivr_string_name *p_self);
	ivr_bool (*ivr_string_name_operator_equal)(const ivr_string_name *p_self, const ivr_string_name *p_other);
	ivr_bool (*ivr_string_name_operator_less)(const ivr_string_name *p_self, const ivr_string_name *p_other);
	void (*ivr_string_name_destroy)(ivr_string_name *p_self);
	void (*ivr_object_destroy)(ivr_object *p_o);
	ivr_object *(*ivr_global_get_singleton)(char *p_name);
	ivr_method_bind *(*ivr_method_bind_get_method)(const char *p_classname, const char *p_methodname);
	void (*ivr_method_bind_ptrcall)(ivr_method_bind *p_method_bind, ivr_object *p_instance, const void **p_args, void *p_ret);
	ivr_variant (*ivr_method_bind_call)(ivr_method_bind *p_method_bind, ivr_object *p_instance, const ivr_variant **p_args, const int p_arg_count, ivr_variant_call_error *p_call_error);
	ivr_class_constructor (*ivr_get_class_constructor)(const char *p_classname);
	ivr_dictionary (*ivr_get_global_constants)();
	void (*ivr_register_native_call_type)(const char *call_type, native_call_cb p_callback);
	void *(*ivr_alloc)(int p_bytes);
	void *(*ivr_realloc)(void *p_ptr, int p_bytes);
	void (*ivr_free)(void *p_ptr);
	void (*ivr_print_error)(const char *p_description, const char *p_function, const char *p_file, int p_line);
	void (*ivr_print_warning)(const char *p_description, const char *p_function, const char *p_file, int p_line);
	void (*ivr_print)(const ivr_string *p_message);
} ivr_native_core_api_struct;

#ifdef __cplusplus
}
#endif

#endif // IVR_NATIVE_API_STRUCT_H
